class Main

types

	public Coords = seq of int
	inv  c == (len c = 2);
	public String = seq of char;
	
	public Direction  = <N>|<NE>|<E>|<SE>|<S>|<SW>|<W>|<NW>;
	
values
	
instance variables

	planes : seq of Plane;
	beacons : seq of Coords;
	airports : seq of Airport;
	
operations
	
	public getPlanes: () ==> seq of Plane
	getPlanes() == return planes
	post RESULT = planes;
	
	public getBeacons: () ==> seq of Coords
	getBeacons() == return beacons
	post RESULT = beacons;
	
	public getPlaneByID: char ==> Plane
	getPlaneByID(id) == 
	(
		dcl plane : Plane := new Plane('a', -1, -1, -2, -2, 10, 5, <N>);
		for i = 1 to len planes do
			if(planes(i).getID() = id) then return planes(i);
		
		return plane;
	);
	
	public addPlane: Plane ==> ()
	addPlane(p) == 
	(
		IO`print("Adding plane ID = "^[p.getID()]);
		planes := [p]^planes
	)
	post len planes = len planes~+1;
	
	public removePlane: Plane ==> ()
	removePlane(p) ==
	(
		let l1^[p]^l2 = planes in planes := l1^l2;
	)
	pre p in set elems planes
	post len planes = len planes~-1;
	
	public addBeacon: int * int ==> ()
	addBeacon(x, y) == 
	(
		dcl coord: Coords := [x, y];
		beacons := [coord]^beacons;
	)
	post len beacons = len beacons~+1;
	
	
	public removeBeacon: int * int ==> ()
	removeBeacon(x, y) == 
	(
		dcl coord: Coords := [x, y];
		let l1^[coord]^l2 = planes in planes := l1^l2;
	)
	post len beacons = len beacons~-1;
	
	public addAirport: Airport ==> ()
	addAirport(a) ==
	(
		IO`print("Adding an airport ID = "^[a.getID()]);
		airports := [a]^airports;
	)
	post len airports = len airports~+1;
	
	public removeAirport: Airport ==> ()
	removeAirport(a) == 
	(
		let l1^[a]^l2 = airports in airports := l1^l2;
	)
	post len airports = len airports~-1;
	
functions
	
	-- TODO Define functiones here
	
traces
	
	-- TODO Define Combinatorial Test Traces here
	
end Main