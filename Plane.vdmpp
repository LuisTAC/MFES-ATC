class Plane

types

	public String = seq of char;
	
values
	
	public static dirs = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"];
	
instance variables
	
	id : char;
	location : Coords;
	destination : Coords;
	max_speed : nat;
	speed : nat;
	inv speed <=max_speed;
	direction : String;
	inv direction in set elems dirs;
		
operations

	public Plane: char * int * int * int * int * nat * nat * String ==> Plane
	Plane(chr, loc_x,loc_y,dest_x,dest_y,max,speed_init, dir) ==
	(
		id := chr;
		location := new Coords(loc_x,loc_y);
		destination := new Coords(dest_x,dest_y);
		max_speed := max;
		speed := speed_init;
		direction := dir;
		return self;
	)
	pre ((loc_x<>dest_x) or (loc_y<>dest_y)) and (max>=speed_init) and (dir in set elems dirs);
	--TODO post
	
	public static getDirectionStr: nat ==> String
	getDirectionStr(ind) ==
	(
		dcl dirs_aux: seq of String :=dirs;
		for i=1 to ind-1 by 1 do dirs_aux := tl dirs_aux;
		return hd dirs_aux;
	)
	pre ind in set inds dirs
	post RESULT in set elems dirs;
	
	public static getDirectionInd: String ==> nat
	getDirectionInd(str) ==
	(
		dcl dirs_aux: seq of String :=dirs;
		for i=1 to len dirs by 1 do
		(
			if hd dirs_aux<>str then dirs_aux := tl dirs_aux
			else return i;
		);
		return 0;
	)
	pre str in set elems dirs
	post RESULT in set inds dirs;
	
	public getID: () ==> char
	getID() == return id
	post RESULT = id;
	
	public getLocation: () ==> Coords
	getLocation() == return location
	post RESULT = location;
	
	public getMaxSpeed: () ==> nat
	getMaxSpeed() == return max_speed
	post RESULT = max_speed;
	
	public getSpeed: () ==> nat
	getSpeed() == return speed
	post RESULT = speed;
	
	public getDirection: () ==> String
	getDirection() == return direction
	post RESULT = direction;
		
	public rotCW: () ==> ()
	rotCW() ==
	(
		dcl ind : nat := getDirectionInd(direction);
		if(ind=8) then ind := 1 else ind := ind+1;
		direction := getDirectionStr(ind);
	)
	post direction in set elems dirs;
	
	public rotCCW: () ==> ()
	rotCCW() ==
	(
		dcl ind : nat := getDirectionInd(direction);
		if(ind=1) then ind := 8 else ind := ind-1;
		direction := getDirectionStr(ind);
	)
	post direction in set elems dirs;
	
	public move: () ==> ()
	move() ==
	(
		cases direction :
			"N" -> location.setY(location.getY()-1),
			"NE" -> (location.setY(location.getY()-1); location.setX(location.getX()+1)),
			"E" -> location.setX(location.getX()+1),
			"SE" -> (location.setY(location.getY()+1); location.setX(location.getX()+1)),
			"S" -> location.setY(location.getY()+1),
			"SW" -> (location.setY(location.getY()+1); location.setX(location.getX()-1)),
			"W" -> location.setX(location.getX()-1),
			"NW" -> (location.setY(location.getY()-1); location.setX(location.getX()-1))
		end
	)
	post direction<>direction~;
	
functions

	-- TODO Define functiones here
	
traces

	-- TODO Define Combinatorial Test Traces here
	
end Plane