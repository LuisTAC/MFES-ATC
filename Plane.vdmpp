class Plane

types

	public String = seq of char;
	public Direction = <N>|<NE>|<E>|<SE>|<S>|<SW>|<W>|<NW>;
	
values
	
	-- TODO Define values here
	
instance variables
	
	id : char;
	location : Coords;
	destination : Coords;
	max_speed : nat;
	speed : nat;
	inv speed <=max_speed;
	direction : Direction;
		
operations

	public Plane: char * int * int * int * int * nat * nat * Direction ==> Plane
	Plane(chr, loc_x,loc_y,dest_x,dest_y,max,speed_init, dir) ==
	(
		id := chr;
		location := new Coords(loc_x,loc_y);
		destination := new Coords(dest_x,dest_y);
		max_speed := max;
		speed := speed_init;
		direction := dir;
		return self;
	)
	pre ((loc_x<>dest_x) or (loc_y<>dest_y)) and (max>=speed_init);
	--TODO post
		
	public getID: () ==> char
	getID() == return id
	post RESULT = id;
	
	public getLocation: () ==> Coords
	getLocation() == return location
	post RESULT = location;
	
	public getMaxSpeed: () ==> nat
	getMaxSpeed() == return max_speed
	post RESULT = max_speed;
	
	public getSpeed: () ==> nat
	getSpeed() == return speed
	post RESULT = speed;
	
	public getDirection: () ==> Direction
	getDirection() == return direction
	post RESULT = direction;
		
	public rotCW: () ==> ()
	rotCW() ==
	(
		cases direction :
		<N> -> direction:= <NE>,
		<NE> -> direction:= <E>,
		<E> -> direction:= <SE>,
		<SE> -> direction:= <S>,
		<S> -> direction:= <SW>,
		<SW> -> direction:= <W>,
		<W> -> direction:= <NW>,
		<NW> -> direction:= <N>
		end;
	);
	
	public rotCCW: () ==> ()
	rotCCW() ==
	(
		-- Direction = <N>|<NE>|<E>|<SE>|<S>|<SW>|<W>|<NW>;
		cases direction :
		<N> -> direction:= <NW>,
		<NW> -> direction:= <W>,
		<W> -> direction:= <SW>,
		<SW> -> direction:= <S>,
		<S> -> direction:= <SE>,
		<SE> -> direction:= <E>,
		<E> -> direction:= <NE>,
		<NE> -> direction:= <N>
		end;
	);
	
	public move: () ==> ()
	move() ==
	(
		cases direction :
			<N> -> location.setY(location.getY()-1),
			<NE> -> (location.setY(location.getY()-1); location.setX(location.getX()+1)),
			<E> -> location.setX(location.getX()+1),
			<SE> -> (location.setY(location.getY()+1); location.setX(location.getX()+1)),
			<S> -> location.setY(location.getY()+1),
			<SW> -> (location.setY(location.getY()+1); location.setX(location.getX()-1)),
			<W> -> location.setX(location.getX()-1),
			<NW> -> (location.setY(location.getY()-1); location.setX(location.getX()-1))
		end
	)
	post direction<>direction~;
	
functions

	-- TODO Define functiones here
	
traces

	-- TODO Define Combinatorial Test Traces here
	
end Plane